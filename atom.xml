<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AlianStudio Blog]]></title>
  <link href="http://blog.alianstudio.info/atom.xml" rel="self"/>
  <link href="http://blog.alianstudio.info/"/>
  <updated>2012-10-18T19:21:33+08:00</updated>
  <id>http://blog.alianstudio.info/</id>
  <author>
    <name><![CDATA[lianmc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[notes agile web development with rails 3e]]></title>
    <link href="http://blog.alianstudio.info/blog/2012/10/17/notes-agile-web-development-with-rails-3e/"/>
    <updated>2012-10-17T20:28:00+08:00</updated>
    <id>http://blog.alianstudio.info/blog/2012/10/17/notes-agile-web-development-with-rails-3e</id>
    <content type="html"><![CDATA[<h2>构建应用程序</h2>

<p>新建应用程序，并运行测试</p>

<pre><code>rails new demo
ruby script/server
</code></pre>

<p>新建控制器</p>

<pre><code>ruby script/generate controller Say
</code></pre>

<p>URL结构</p>

<pre><code>http://xxx.xxx.com/controller/action
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记: 实用数字信号处理从原理到应用]]></title>
    <link href="http://blog.alianstudio.info/blog/2012/10/15/notes-dsp-practical-guide-for-engineers-and-scientists/"/>
    <updated>2012-10-15T18:18:00+08:00</updated>
    <id>http://blog.alianstudio.info/blog/2012/10/15/notes-dsp-practical-guide-for-engineers-and-scientists</id>
    <content type="html"><![CDATA[<p>书名: 实用数字号处理: 从原理到应用   <br/>
原名: Digital Signal Processing: A Practical Guide for Engineers and Scientists  <br/>
作者: Steve W. Smith  <br/>
丛书: 图灵电子与电气工程丛书  <br/>
出版社: 人民邮电出版社</p>

<p>该书从1997年左右开始在作者网站<a href="http://www.dspguide.com">http://www.dspguide.com</a>上作为电子书免费下载阅读，现在也可以上<a href="http://www.analog.com/en/content/scientist_engineers_guide/fca.html">ADI</a>下载，后来出版社出了纸质版的，该书内容通俗易懂，在DSP学习者非常有名，非常值得一看。</p>

<h2>DSP应用领域及影响</h2>

<p>由于计算机价格昂贵，DSP最初只用于4个关键领域：雷达和声呐、石油勘探、空间探测、医学成像 => 军事和政府需求推动。</p>

<p>应用领域: 电信、音频处理、回声定位、图像处理。</p>

<h2>统计、概率和噪声</h2>

<p>信号采集过程: 统计和概率中概念的应用。<strong>统计</strong>是解释数字化数据(采集的信号)的一种科学，<strong>概率</strong>则被用在DSP中以帮助理解产生信号的<strong>过程</strong>。理解采集信号和基本过程之间的区别是许多DSP技术的关键。</p>

<p>横轴上参数的类型就是信号所在的域。</p>

<pre><code>信噪比(SNR) = 平均值 / 标准偏差
变异系数(CV) = 标准偏差 / 平均值
</code></pre>

<p>好的数据意味着较大的SNR值和较小的CV值。</p>

<p>正态分布的积分不能用一般方法积分，只能通过数值积分的方法来实现。</p>

<p>平均值相对于真值的偏移程度称为测量的<strong>准确度</strong>，每次独立的测量值之间的差别叫做测量的<strong>精度</strong>。准确度是对系统校准的衡量(系统误差)，精度是对随机噪声的衡量(随机误差)。</p>

<p>当需要确定误差究竟是准确度还是精度的问题是时，请先问自己两个问题。第一，对连续的测量值取平均能提供较好的测量结果吗？如果是，则为精度问题;反之，则为准确度问题。第二，测量系统的校准能改善误差吗？如果是，则为准确度问题;如果不是，则为精度问题。</p>

<!-- more -->


<h2>模数转换与数模转换</h2>

<h3>量化</h3>

<p>数字化是digitize，而数字化处理是digitization，是因为digitalize, digatalization 首先用于医疗技术。</p>

<p>注意抽样和量化概念上的差别，开关电容滤波器只是用了抽样而没有量化。量化对信号来说是引入特定量的随机噪声，增加的噪声在+-1/2 LSB范围内，平均值为0，标准偏差为1/sqrt(12)LSB(约0.29LSB)。</p>

<blockquote><p>假设模拟信号最大幅值1.0V, 随机噪声均方根为1.0mV, 进行8位ADC，则1.0V为255, 1.0mV为0.255LSB, 随机噪声以正交方式叠加，则量化后总噪声为sqrt(0.255<sup>2+0.29<sup>2)=0.386LSB，噪声增加50%，因此不能选用8位AD，可以选用12位AD。</sup></sup></p></blockquote>

<p>当需要决定一个系统的AD位数时，需要考虑两个问题：模拟信号已经含有多少噪声？数字信号中能允许多少噪声？</p>

<p>什么情况下量化模型不是有效的呢？当对缓变模拟信号进行多次连续抽样时保持相同输出，此时量化误差不能当作随机误差处理，此时更像是阈值效应或者是实然的扭曲。<strong>加抖动</strong>是改进缓变信号数字化效果的常见技术，<strong>增加噪声反而提供更加精确的信息</strong>。数字化之后再用<strong>消抖动</strong>技术。</p>

<h3>抽样定理</h3>

<p>如果在抽样时发生频率混叠，数字频率为0.2倍抽样率可能来自模拟信号中的0.2, 0.8, 1.2, 1.8, 2.2倍抽样率等无限多个频率(以0.5倍为对称)。频率混叠不仅改变频率而且产生180度相位反转，零相移在模拟频率的0~0.5, 1.0~1.5, 2.0~2.5倍发生，反相(180)在模拟频率的0.5~1.0, 1.5~2.0, 2.5~3.0倍发生。</p>

<h3>数模转换</h3>

<p>数模转换是一个零阶保持的过程，因此理想的重建滤波器需要进行sinc函数修正。</p>

<p>数字信号受限于分辨率和抽样率，模拟信号在分辨率和抽样率的精度无限好但受限于噪声和带宽，数字处理可以达到模拟信号的精度，数字信号包含模拟信号所有信息。</p>

<h3>用于数据转换的模拟滤波器</h3>

<ol>
<li>每个数字化信号的性质取决于选用的抗混叠滤波器类型。</li>
<li>DSP的未来发展趋势是以软件代替硬件。如多抽样率技术通过软件技巧来减少对抗混叠滤波器和重建滤波器的需要。因此需要了解硬件才能用软件来代替硬件。</li>
<li>许多DSP跟数字滤波器设计相关。</li>
</ol>


<p>开关电容滤波器利用开关和电容来模拟RC网络中的电阻。</p>

<p>多数系统中，大约0.4到0.5倍于截止频率的频带是无法使用的，其原因是滚降加剧和频率混叠。这是受模拟滤波器限制的结果。</p>

<h3>抗混叠滤波器的选择</h3>

<p>Chebysev将滚降效应最优化，Butterworth将通带平坦度最优化，贝塞尔将阶跃响应最优化。</p>

<p>抗混叠滤波器的选择几乎完全取决于一个问题：要处理的信号中信息是如何表现的。信息编码在模拟波形的常用两个方法是：时域编码(波形形状, 如心电信号)和频域编码(正弦波,如音频信号)。</p>

<p>抽样定理在时域编码数字化的理解上提供不了什么帮助。时域信号的目标是保持边沿锐度(携带信息)的同时除去高频成分(抗混叠)。解决方案是使用贝塞尔滤波器，通常是将截止频率设为抽样频率的四分之一。</p>

<h3>多抽样率数据转换</h3>

<p>多抽样率数据转换的重要价值：用软件代替了模拟元件，在大规模生产中有经济优势;在要求严格的场合，表现出较好的性能。如数字算法(由舍入误差决定的0.0001%精度)替换模拟元件(1%精度)。</p>

<h3>单比特数据转换</h3>

<p>delta-sigma型ADC特性的限制：很难实现模拟信号的多路切换，当输入从一路信号切换到另一路时，数字滤波器只有在清除掉此前信号的数据之后才能对新信号进行完全操作。同时也不能准确知道每个抽样发生的时刻，这是由于已获取的抽样是输入信号在一段时间内的单比特数据的合成，这对频域信号(如音频)的编码不是问题，但却无法使用在时域中，为了解信号波形的形状，通常需要知道每个抽样发生的精确时间。</p>

<p>用于音频的16位ADC, 并不意味着每次都要精确到16位。不要认为芯片制造商会将所有内在原理告诉他的竞争对手，当然，也不要认为它会告诉你。</p>

<h2>DSP软件</h2>

<p>定点数相邻数字的间隔总是准确的1。浮点数相邻数字的间隔会根据所表示数的范围而改变，与相邻数字的间隔大约是数字本身的一千万分之一，大的数字有较大的间距而小的数字有较小的间距。</p>

<h2>线性系统</h2>

<p><strong>系统</strong>是对每个输入信号都产生一个输出信号的过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes: Cocoa Programming for Mac OS X 4th]]></title>
    <link href="http://blog.alianstudio.info/blog/2012/10/13/notes-cocoa-programming-for-macosx-4e/"/>
    <updated>2012-10-13T21:27:00+08:00</updated>
    <id>http://blog.alianstudio.info/blog/2012/10/13/notes-cocoa-programming-for-macosx-4e</id>
    <content type="html"><![CDATA[<h2>Let&#8217;s Get Started</h2>

<p><code>#import</code> is similar to the C preprocessor&#8217;s <code>#include</code>.However, <code>#import</code> ensures that the files is included only once.</p>

<p>To minimize conflicts between C code and Objective-C code, Objective-C keywords are prefixed by @.</p>

<h2>Memory Management</h2>

<p>three memory management solutions:</p>

<ol>
<li>manual reference counting</li>
<li>garbage collection for Objective-C in MacOS 10.5</li>
<li>automatic reference counting(ARC) in MacOS 10.7</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记: Git权威指南]]></title>
    <link href="http://blog.alianstudio.info/blog/2012/10/13/notes-gotgit/"/>
    <updated>2012-10-13T10:28:00+08:00</updated>
    <id>http://blog.alianstudio.info/blog/2012/10/13/notes-gotgit</id>
    <content type="html"><![CDATA[<h2>Git初始化</h2>

<h4>命令补全</h4>

<pre><code>$ brew install bash-completion
# add the following lines to your ~/.bash_profile
if [ -f `brew --prefix`/etc/bash_completion ]; then
    . `brew --prefix`/etc/bash_completion
fi
</code></pre>

<h4>用户配置文件<code>~/.gitconfig</code>，系统配置文件<code>/etc/gitconfig</code>。</h4>

<pre><code>$ git config --global user.name "xx"
$ git config --global user.email "xx@mail.com"
$ git config --system alias.ci commit
$ git config --global color.ui true
</code></pre>

<h4>重新修改最新的提交</h4>

<pre><code>$ git commit --amend -m "new message"
</code></pre>

<h2>Git暂存区(stage)</h2>

<h4>查看提交日志</h4>

<pre><code>$ git log --pretty=oneline
</code></pre>

<blockquote><p>文件.git/index实际上就是一个包含文件索引的目录树，记录了文件名和文件在状态信息(时间戳和文件长度等)。文件的内容并没有存储在其中，而是保存在Git对象库.git/objects目录中，文件索引建立了文件和对象库中对象实体之间的对应。</p></blockquote>

<h4>查看HEAD指向的目录树</h4>

<pre><code>$ git ls-tree -l HEAD
</code></pre>

<h4>git diff命令</h4>

<ul>
<li>工作区和暂存区比较<code>$ git diff</code></li>
<li>暂存区和HEAD比较<code>$ git diff --cached</code></li>
<li>工作区和HEAD比较<code>$ git diff HEAD</code></li>
</ul>


<blockquote><p>不要使用git commit -a命令，减少用git add命令标识变更文件的步骤，会丢掉git暂存区带给用户的最大好处。</p>

<h4>保存当前工作进度</h4>

<pre><code>$ git stash
</code></pre></blockquote>

<h2>git 对象</h2>

<p>git库中的objects目录说明：ID的前2位作为目录名，后38位作为文件名。</p>

<p>blob: binary large object, basic large object</p>

<h2>git 重置</h2>

<p>引用<code>refs/heads/master</code>就好像是一个游标，在有新的提交发生时指向新的提交。可是如果只可上，不可下，就不能称为”游标“。Git的`git reset 命令，可以将”游标“指向任意一个存在的提交ID。</p>

<pre><code>git reset --hard 9e8a761
</code></pre>

<p><code>git reflog show master</code>查看操作日志，可用于恢复操作。</p>

<pre><code>git reset --hard master@{2}
</code></pre>

<p><code>git reset HEAD^</code> 工作区不改变，但是暂存区会回退到上一次提交之前，引用也会回退一次。</p>

<h2>git 检出</h2>

<p>重置(reset)的默认值是HEAD，而检出(checkout)的默认值是暂存区。因此，重置一般用于重置暂存区(除非使用&#8211;hard参数,否则不重置工作区)，而检出命令主要是覆盖</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记: 运算放大器运用技术手册]]></title>
    <link href="http://blog.alianstudio.info/blog/2012/10/12/notes-op-amp-applications-handbook/"/>
    <updated>2012-10-12T10:28:00+08:00</updated>
    <id>http://blog.alianstudio.info/blog/2012/10/12/notes-op-amp-applications-handbook</id>
    <content type="html"><![CDATA[<h2>运算放大器基础</h2>

<h3>概述</h3>

<p>在应用需求的驱动下，才发展出各种不同结构的运放。</p>

<p>运放处理两个输入端之间的微弱差模信号，将其变换成以电源公共端为参考地的单端输出信号。</p>

<h4>理想运放的特性</h4>

<ul>
<li>差分增益无穷大，精密运放的增益通常为100~130dB，而高速运放的增益仅为60~70dB。</li>
<li>共模增益为零，精密运放CMR可达130dB，高速运放约为60~70dB。</li>
<li>输入失调电压为零，偏置电流为零</li>
</ul>


<h4>运放的输入端</h4>

<ul>
<li>输入阻抗高</li>
<li>偏置电流低</li>
<li>仅对差模电压信号有响应</li>
<li>对共模电压信号无响应</li>
</ul>


<h4>运放输出端</h4>

<ul>
<li>输出阻抗低</li>
</ul>


<h4>标准运放反馈电路</h4>

<p>三种基本类型：同相放大电路、反相放大电路、差分放大电路</p>

<blockquote><p>求和点可能是模拟电路工程师最常用但又最不在意的一个术语。通常，我们将运放的反相输入端称为<strong>求和点</strong>，而将同相输入端作为<strong>参考点</strong>。需要注意的是，求和点的电压是变化的，因为对于线性运放电路来说，其反相输入端（求和点）要求与其同相输入端(参考点)的电势绝对相等。简而言之，运放尽量使求和点电压跟踪参考点电压。</p></blockquote>

<p>差分运算放大电路：由于CMR性能取决于网络电阻比值的匹配程度，因此，实际电路的增益通常取整数值(使用<strong>电阻排</strong>)。</p>

<h4>非理想运放，有限开环增益带来的静态误差</h4>

<h5>噪声增益(noise gain)</h5>

<p>分析运放电路，首先就要区分噪声增益和信号增益。</p>

<h5>增益稳定性</h5>

<p>开环增益会随温度、负载等变化</p>

<h5>环路增益</h5>

<p>几乎每一项因负反馈而引起的闭环特性的改善程度，都与环路增益的大小成比例。</p>

<h5>环路增益的频率特性</h5>

<h4>运放的共模动态范围</h4>

<p>运放的输入和输出共模电压的范围将依据其与两条电源轨的限制程度来定义。</p>

<p>对于单电源供电的运放来说，其共模电压范围就达到两条电源轨线。</p>

<h4>双端供电和单端供电的差别</h4>

<p>10V是运放工作电源范围内的一个分界点。</p>

<p>双电源运放以其更高的精度而长期深受设计师的喜爱，但受到诸如斩波稳零型单运放的挑战。</p>

<h3>运放的拓扑</h3>

<p>电流反馈型拓扑主要用于对高速和低扰动有苛刻要求的场合，这是在同等条件下三极管电路的电流变化速度比电压快的特性。</p>
]]></content>
  </entry>
  
</feed>
