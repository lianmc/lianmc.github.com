<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 读书笔记 | AlianStudio Blog]]></title>
  <link href="http://lianmc.github.com/blog/categories/读书笔记/atom.xml" rel="self"/>
  <link href="http://lianmc.github.com/"/>
  <updated>2012-10-16T13:38:58+08:00</updated>
  <id>http://lianmc.github.com/</id>
  <author>
    <name><![CDATA[lianmc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[读书笔记: 实用数字信号处理从原理到应用]]></title>
    <link href="http://lianmc.github.com/blog/2012/10/15/notes-dsp-practical-guide-for-engineers-and-scientists/"/>
    <updated>2012-10-15T18:18:00+08:00</updated>
    <id>http://lianmc.github.com/blog/2012/10/15/notes-dsp-practical-guide-for-engineers-and-scientists</id>
    <content type="html"><![CDATA[<p>书名: 实用数字号处理: 从原理到应用   <br/>
原名: Digital Signal Processing: A Practical Guide for Engineers and Scientists  <br/>
作者: Steve W. Smith  <br/>
丛书: 图灵电子与电气工程丛书  <br/>
出版社: 人民邮电出版社</p>

<p>该书从1997年左右开始在作者网站<a href="http://www.dspguide.com">http://www.dspguide.com</a>上作为电子书免费下载阅读，现在也可以上<a href="http://www.analog.com/en/content/scientist_engineers_guide/fca.html">ADI</a>下载，后来出版社出了纸质版的，该书内容通俗易懂，在DSP学习者非常有名，非常值得一看。</p>

<h2>DSP应用领域及影响</h2>

<p>由于计算机价格昂贵，DSP最初只用于4个关键领域：雷达和声呐、石油勘探、空间探测、医学成像 => 军事和政府需求推动。</p>

<p>应用领域: 电信、音频处理、回声定位、图像处理。</p>

<h2>统计、概率和噪声</h2>

<p>信号采集过程: 统计和概率中概念的应用。<strong>统计</strong>是解释数字化数据(采集的信号)的一种科学，<strong>概率</strong>则被用在DSP中以帮助理解产生信号的<strong>过程</strong>。理解采集信号和基本过程之间的区别是许多DSP技术的关键。</p>

<p>横轴上参数的类型就是信号所在的域。</p>

<pre><code>信噪比(SNR) = 平均值 / 标准偏差
变异系数(CV) = 标准偏差 / 平均值
</code></pre>

<p>好的数据意味着较大的SNR值和较小的CV值。</p>

<p>正态分布的积分不能用一般方法积分，只能通过数值积分的方法来实现。</p>

<p>平均值相对于真值的偏移程度称为测量的<strong>准确度</strong>，每次独立的测量值之间的差别叫做测量的<strong>精度</strong>。准确度是对系统校准的衡量(系统误差)，精度是对随机噪声的衡量(随机误差)。</p>

<p>当需要确定误差究竟是准确度还是精度的问题是时，请先问自己两个问题。第一，对连续的测量值取平均能提供较好的测量结果吗？如果是，则为精度问题;反之，则为准确度问题。第二，测量系统的校准能改善误差吗？如果是，则为准确度问题;如果不是，则为精度问题。</p>

<h2>模数转换与数模转换</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes: Cocoa Programming for Mac OS X 4th]]></title>
    <link href="http://lianmc.github.com/blog/2012/10/13/notes-cocoa-programming-for-macosx-4e/"/>
    <updated>2012-10-13T21:27:00+08:00</updated>
    <id>http://lianmc.github.com/blog/2012/10/13/notes-cocoa-programming-for-macosx-4e</id>
    <content type="html"><![CDATA[<h2>Let's Get Started</h2>

<p><code>#import</code> is similar to the C preprocessor's <code>#include</code>.However, <code>#import</code> ensures that the files is included only once.</p>

<p>To minimize conflicts between C code and Objective-C code, Objective-C keywords are prefixed by @.</p>

<h2>Memory Management</h2>

<p>three memory management solutions:</p>

<ol>
<li>manual reference counting</li>
<li>garbage collection for Objective-C in MacOS 10.5</li>
<li>automatic reference counting(ARC) in MacOS 10.7</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记: Git权威指南]]></title>
    <link href="http://lianmc.github.com/blog/2012/10/13/notes-gotgit/"/>
    <updated>2012-10-13T10:28:00+08:00</updated>
    <id>http://lianmc.github.com/blog/2012/10/13/notes-gotgit</id>
    <content type="html"><![CDATA[<h2>Git初始化</h2>

<h4>命令补全</h4>

<pre><code>$ brew install bash-completion
# add the following lines to your ~/.bash_profile
if [ -f `brew --prefix`/etc/bash_completion ]; then
    . `brew --prefix`/etc/bash_completion
fi
</code></pre>

<h4>用户配置文件<code>~/.gitconfig</code>，系统配置文件<code>/etc/gitconfig</code>。</h4>

<pre><code>$ git config --global user.name "xx"
$ git config --global user.email "xx@mail.com"
$ git config --system alias.ci commit
$ git config --global color.ui true
</code></pre>

<h4>重新修改最新的提交</h4>

<pre><code>$ git commit --amend -m "new message"
</code></pre>

<h2>Git暂存区(stage)</h2>

<h4>查看提交日志</h4>

<pre><code>$ git log --pretty=oneline
</code></pre>

<blockquote><p>文件.git/index实际上就是一个包含文件索引的目录树，记录了文件名和文件在状态信息(时间戳和文件长度等)。文件的内容并没有存储在其中，而是保存在Git对象库.git/objects目录中，文件索引建立了文件和对象库中对象实体之间的对应。</p></blockquote>

<h4>查看HEAD指向的目录树</h4>

<pre><code>$ git ls-tree -l HEAD
</code></pre>

<h4>git diff命令</h4>

<ul>
<li>工作区和暂存区比较<code>$ git diff</code></li>
<li>暂存区和HEAD比较<code>$ git diff --cached</code></li>
<li>工作区和HEAD比较<code>$ git diff HEAD</code></li>
</ul>


<blockquote><p>不要使用git commit -a命令，减少用git add命令标识变更文件的步骤，会丢掉git暂存区带给用户的最大好处。</p>

<h4>保存当前工作进度</h4>

<pre><code>$ git stash
</code></pre></blockquote>

<h2>git 对象</h2>

<p>git库中的objects目录说明：ID的前2位作为目录名，后38位作为文件名。</p>

<p>blob: binary large object, basic large object</p>

<h2>git 重置</h2>

<p>引用<code>refs/heads/master</code>就好像是一个游标，在有新的提交发生时指向新的提交。可是如果只可上，不可下，就不能称为”游标“。Git的`git reset 命令，可以将”游标“指向任意一个存在的提交ID。</p>

<pre><code>git reset --hard 9e8a761
</code></pre>

<p><code>git reflog show master</code>查看操作日志，可用于恢复操作。</p>

<pre><code>git reset --hard master@{2}
</code></pre>

<p><code>git reset HEAD^</code> 工作区不改变，但是暂存区会回退到上一次提交之前，引用也会回退一次。</p>

<h2>git 检出</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记: 运算放大器运用技术手册]]></title>
    <link href="http://lianmc.github.com/blog/2012/10/12/notes-op-amp-applications-handbook/"/>
    <updated>2012-10-12T10:28:00+08:00</updated>
    <id>http://lianmc.github.com/blog/2012/10/12/notes-op-amp-applications-handbook</id>
    <content type="html"><![CDATA[<h2>运算放大器基础</h2>

<h3>概述</h3>

<p>在应用需求的驱动下，才发展出各种不同结构的运放。</p>

<p>运放处理两个输入端之间的微弱差模信号，将其变换成以电源公共端为参考地的单端输出信号。</p>

<h4>理想运放的特性</h4>

<ul>
<li>差分增益无穷大，精密运放的增益通常为100~130dB，而高速运放的增益仅为60~70dB。</li>
<li>共模增益为零，精密运放CMR可达130dB，高速运放约为60~70dB。</li>
<li>输入失调电压为零，偏置电流为零</li>
</ul>


<h4>运放的输入端</h4>

<ul>
<li>输入阻抗高</li>
<li>偏置电流低</li>
<li>仅对差模电压信号有响应</li>
<li>对共模电压信号无响应</li>
</ul>


<h4>运放输出端</h4>

<ul>
<li>输出阻抗低</li>
</ul>


<h4>标准运放反馈电路</h4>

<p>三种基本类型：同相放大电路、反相放大电路、差分放大电路</p>

<blockquote><p>求和点可能是模拟电路工程师最常用但又最不在意的一个术语。通常，我们将运放的反相输入端称为<strong>求和点</strong>，而将同相输入端作为<strong>参考点</strong>。需要注意的是，求和点的电压是变化的，因为对于线性运放电路来说，其反相输入端（求和点）要求与其同相输入端(参考点)的电势绝对相等。简而言之，运放尽量使求和点电压跟踪参考点电压。</p></blockquote>

<p>差分运算放大电路：由于CMR性能取决于网络电阻比值的匹配程度，因此，实际电路的增益通常取整数值(使用<strong>电阻排</strong>)。</p>

<h4>非理想运放，有限开环增益带来的静态误差</h4>

<h5>噪声增益(noise gain)</h5>

<p>分析运放电路，首先就要区分噪声增益和信号增益。</p>

<h5>增益稳定性</h5>

<p>开环增益会随温度、负载等变化</p>

<h5>环路增益</h5>

<p>几乎每一项因负反馈而引起的闭环特性的改善程度，都与环路增益的大小成比例。</p>

<h5>环路增益的频率特性</h5>

<h4>运放的共模动态范围</h4>

<p>运放的输入和输出共模电压的范围将依据其与两条电源轨的限制程度来定义。</p>

<p>对于单电源供电的运放来说，其共模电压范围就达到两条电源轨线。</p>

<h4>双端供电和单端供电的差别</h4>

<p>10V是运放工作电源范围内的一个分界点。</p>

<p>双电源运放以其更高的精度而长期深受设计师的喜爱，但受到诸如斩波稳零型单运放的挑战。</p>

<h3>运放的拓扑</h3>

<p>电流反馈型拓扑主要用于对高速和低扰动有苛刻要求的场合，这是在同等条件下三极管电路的电流变化速度比电压快的特性。</p>
]]></content>
  </entry>
  
</feed>
